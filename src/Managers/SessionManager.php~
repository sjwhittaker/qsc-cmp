<?php
namespace Managers;

include_once($_SERVER["DOCUMENT_ROOT"]."/cas/cas_utils.php"); 

/** 
 * The class SessionManager is essentially a wrapper for contants and (static)
 * functions that access and modify session variables.
 *
 * @author Sarah-Jane Whittaker
 */
class SessionManager {
    /**************************************************************************
     * Constants
     **************************************************************************/
     private const SESSION_USER_NETID = "user_netid";
     private const SESSION_USER_FIRST_NAME = "user_first_name";
     private const SESSION_USER_LAST_NAME = "user_last_name";
     private const SESSION_USER_LOGIN_TIME = "user_login_time";
     private const SESSION_USER_LAST_LOAD_TIME = "user_last_load_time";      
     private const SESSION_ERROR_MESSAGE = "error_message"; 

     private const SSO_Q_PERSON_OBJECT = "qPersonObj";
     private const SSO_Q_PERSON_OBJECT_NETID = "netID";
     
     
    /**************************************************************************
     * Static Functions
     **************************************************************************/     
    /** 
     * This function manages the session values associated with a user
     * logging in.
     *
     * @param $user_netid       The user's NetID
     * @param $user_first_name  The user's first name
     * @param $user_last_name   The user's last name
     * @param $user_login_time  The time the user logged in
     */
     public static function userLogin($user_netid, $user_first_name, $user_last_name, $user_login_time) {
        $_SESSION[self::SESSION_USER_NETID] = $user_netid;
        $_SESSION[self::SESSION_USER_FIRST_NAME] = $user_first_name;
        $_SESSION[self::SESSION_USER_LAST_NAME] = $user_last_name;
        $_SESSION[self::SESSION_USER_LOGIN_TIME] = $user_login_time;
        $_SESSION[self::SESSION_USER_LAST_LOAD_TIME] = $user_login_time;
    } 
    
    /** 
     * This function initializes the session for use on a page or in a script.
     */
    public static function initialize() {
        session_start();
    }    
       
    /** 
     * This function removes the session values and closes the session when a
     * user logs out.
     */
    public static function userLogout() {
        session_unset();  
        session_destroy(); 
    }
    
    /** 
     * This function returns whether the user is presently logged in.
     *
     * @return  A boolean with the user's login status
     */
    public static function isUserLoggedIn() {
        return (! empty(self::getUserNetID()));
    }    

    /** 
     * This function returns the user's NetID.
     *
     * @return  The user's NetID
     */
    public static function getUserNetID() {
        return array_key_exists(self::SESSION_USER_NETID, $_SESSION) ?
            $_SESSION[self::SESSION_USER_NETID] : "";
    }

    /** 
     * This function returns the user's login time.
     *
     * @return  The user's login time
     */
    public static function getUserLoginTime() {
        return array_key_exists(self::SESSION_USER_LOGIN_TIME, $_SESSION) ?
            $_SESSION[self::SESSION_USER_LOGIN_TIME] : "";
    }

    
    /** 
     * This function returns the user's first name.
     *
     * @return  The user's name
     */
    public static function getUserFirstName() {
        return array_key_exists(self::SESSION_USER_FIRST_NAME, $_SESSION) ?
            $_SESSION[self::SESSION_USER_FIRST_NAME] : "";
    }
    
    /** 
     * This function returns the last 'saved' error message.
     *
     * @return  A string which may contain HTML
     */
    public static function getErrorMessage() {
        return array_key_exists(self::SESSION_ERROR_MESSAGE, $_SESSION) ?
            $_SESSION[self::SESSION_ERROR_MESSAGE] : "";
    }
    
    /** 
     * This function records/'saves' an error message.
     *
     * @param  A string which may contain HTML
     */
    public static function setErrorMessage($message) {
        $_SESSION[self::SESSION_ERROR_MESSAGE] = $message;
    }
    
    /**************************************************************************
     * Static Functions
     **************************************************************************/     
    /** 
     */
    public static function getNetIDFromSSO() {
        $netID = null;
        
        if ((array_key_exists(self::SSO_Q_PERSON_OBJECT, $_SESSION) && array_key_exists(self::SSO_Q_PERSON_OBJECT_NETID, $_SESSION[SSO_Q_PERSON_OBJECT]))) {
            $netID = $_SESSION[SSO_Q_PERSON_OBJECT][SSO_Q_PERSON_OBJECT_NETID];
        }
        
        //return (empty($netid) ? null : $netID);
        // For local development
        return "sjw3";
    }
}